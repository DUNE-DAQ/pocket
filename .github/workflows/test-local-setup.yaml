name: Test setup.local

on: push

jobs:
  test-local-setup:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        - os: ubuntu-latest

        # MacOS works, but CI is very tempramental...
        # - os: macos-latest
        # check windows-powershell-compatibility branch
        # everything works except password generation
        # - os: windows-latest
    steps:
    - uses: actions/checkout@v2

    # - uses: docker-practice/actions-setup-docker@master
    #   if: ${{ matrix.os == 'macos-latest' }}
    
    - name: verify docker is functional
      run: docker ps
    - name: setup.local
      run: |
        make setup.local
        make env >> $GITHUB_ENV
    - name: InfluxDB works
      run: |
        kubectl -n monitoring wait --for condition=available deployment influxdb --timeout=60s
        curl --fail http://localhost:31002/health | grep "ready for queries and writes"
    - name: Grafana works
      run: |
        kubectl -n monitoring wait --for condition=available deployment grafana
        curl --fail http://localhost:31003/api/health
    - name: Kubernetes Dashboard works
      run: |
        kubectl -n kubernetes-dashboard wait --for condition=available deployment kubernetes-dashboard
        curl --fail http://localhost:31001
    - name: ElasticSearch comes online
      run: |
        echo "waiting for elasticsearch"
        i=0
        while true; do
          i=$((i+1))
          if [[ $i -eq 120 ]]; then
            echo "timout waiting for ES"
            break
          elif kubectl -n monitoring get es | grep green > /dev/null; then
            echo
            break
          else
            echo -n .
            sleep 1s
          fi
        done

        curl -k --user "elastic:$(kubectl get -n monitoring secret dune-eck-es-elastic-user -o=jsonpath='{.data.elastic}' | base64 --decode)" https://localhost:31004/_cluster/health | grep "green" > /dev/null
    - name: Kibana comes online
      run: |
        echo "waiting for Kibana"
        i=0
        while true; do
          i=$((i+1))
          if [[ $i -eq 120 ]]; then
            echo "timout waiting for Kibana"
            break
          elif kubectl -n monitoring get kibana | grep green > /dev/null; then
            echo
            break
          else
            echo -n .
            sleep 1s
          fi
        done

        curl -k --user "elastic:$(kubectl get -n monitoring secret dune-eck-es-elastic-user -o=jsonpath='{.data.elastic}' | base64 --decode)" https://localhost:31005/api/status | grep "green" > /dev/null


